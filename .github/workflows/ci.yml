name: CI
on:
  push:
    branches: [ main, master ]
  pull_request:

permissions:
  contents: read

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}-chromium-1.55
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx -y playwright@1.55.0 install --with-deps chromium

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images (Docker Compose)
        env:
          DOCKER_BUILDKIT: 1
        run: docker compose build --pull

      - name: Deploy backend (API + adapters)
        run: docker compose up -d adapter-a adapter-b api

      - name: Wait for API to be healthy
        run: |
          for i in {1..60}; do
            curl -fsS http://localhost:8080/healthz && exit 0
            sleep 2
          done
          echo "API not healthy" && docker compose logs api && exit 1

      - name: k6 smoke (quick)
        run: |
          docker run --rm --network host \
            -e BASE_URL=http://localhost:8080 \
            -e SERVICE_API_KEY=service-secret \
            -v "$PWD/tests/perf":/scripts \
            grafana/k6 run /scripts/k6-smoke.js

      - name: Run UI tests
        env:
          BASE_URL: http://localhost:8080
        run: make test-ui WORKERS=4

      - name: Upload Playwright report (UI)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-ui
          path: playwright-report

      - name: Upload raw test results (UI)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ui
          path: test-results

      - name: Run API tests
        env:
          BASE_URL: http://localhost:8080
        run: make test-api-only WORKERS=4

      - name: Summarize test results (percentage)
        if: always()
        run: |
          node scripts/collect-metrics.js || true
          if [ -f test-results/summary.json ]; then
            node -e "const fs=require('fs');const p=process.env;const s=JSON.parse(fs.readFileSync('test-results/summary.json','utf8'));const pct=s.total?((s.passed/s.total)*100).toFixed(1):'0.0';const lines=[`### Test Summary`,``,`- Passed: ${s.passed}/${s.total} (${pct}%)`,`- Failed: ${s.failed}`].join('\n');fs.appendFileSync(p.GITHUB_STEP_SUMMARY,lines+'\n');console.log(lines);"
          fi

      - name: Upload Playwright report (API)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-api
          path: playwright-report

      - name: Upload raw test results (API)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-api
          path: test-results

      - name: Docker logs (on failure)
        if: failure()
        run: docker compose logs --no-color

      - name: Teardown
        if: always()
        run: docker compose down -v
